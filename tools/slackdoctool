#!/bin/bash
# Author: Matthew Fillpot
# Created: 2012-12-28
# License: BSD
#
# Description
# -------------------------------------------------------
# Toolkit used to simplify offline editing of slackdocs
#  wiki content
#
VERSION="0.0.1"

# Define the path to the repo directory
REPO_PATH=$(dirname $(cd `dirname "${BASH_SOURCE[0]}"` && pwd) )

# Define the variables
EXTENSION="slackdoc"
FILETYPE="slackdocs"
SYNTAXFILE="slackdocs.vim"
SD_DIR="${HOME}/slackdocs"
SYNTAX_DIR="${REPO_PATH}/syntax_files"
#TOOLS_DIR="tools"
TEMPLATE_DIR="${SD_DIR}/templates"

CWD=`pwd`

# Define a variable for return strings
RTRN=""

# Set Output font colors
BLDTXT='\e[1m%s'
NRMTXT='\e[0m%s'
REDTXT='\e[1;31m'

BuildStructure() {
  if [ ! -d ${TEMPLATE_DIR} ]; then
    printf "${REDTXT}The user directory at ${SD_DIR} does not exist${NRMTXT}\n"
    read -p "Would you like to create it? (Y/N) :" yn
    case ${yn} in
    [Yy*]* )
      mkdir -v ${SD_DIR}
      if [ ! -d ${TEMPLATE_DIR} ]; then
        mkdir -v ${TEMPLATE_DIR}
        fi
      ;;
    * )
      printf "${REDTXT}Cannot resume without directory in place, Terminating.${NRMTXT}\n"
      exit 1
      ;;
    esac
  fi

}

PullPage() {
  # Pulls the single page from $1 into the location at $2

  if [ ! -d ${2} ]; then
    printf "${REDTXT}The ${2} directory does not exist, terminating action${NRMTXT}\n"
    exit 1
  fi

  local SDBASE="http://docs.slackware.com"

  local EXTRACTLINE="?do=export_raw"

  # Page holds the name of the requested page
  local PAGE=${1}

  # if requested page includs base url remove it of output page can be 
  #  determined
  if [[ "${PAGE}" == *"${SDBASE}"* ]]; then
    PAGE="$(echo "${PAGE}"|cut -d "/" -f 4)"
  fi

  # Set output file name
  if [ "${2}" = "${TEMPLATE_DIR}" ]; then
    local OF="$(echo "${PAGE}"|sed 's/:/-/g'|sed 's/templates-//g').${EXTENSION}"
  else
    local OF="$(echo "${PAGE}"|sed 's/:/-/g').${EXTENSION}"
  fi

  # If output file exists remove it
  if [ -e ${OF} ]; then
    rm ${OF}
  fi

  # Append the base url to the page address
  local PAGE=${SDBASE}/${PAGE}

  if [ -e ${2}/${OF} ]; then
    printf "${REDTXT}${OF} exists${NRMTXT}\n"
    read -p "Would you like to overwrite it? " yn
    case ${yn} in
      [Yy]* )

        rm ${2}/${OF}

        FinishPull ${PAGE}${EXTRACTLINE} ${PAGE} ${2}/${OF}
        ;;
      * )
        printf ""
        ;;
    esac
  else
    FinishPull ${PAGE}${EXTRACTLINE} ${PAGE} ${2}/${OF}
  fi
}

FinishPull() {
  # retrieve the page
  wget ${1} --output-document=${3}

  # Test for a valid pull and display associated message
  if [ -n "$(cat ${3}|grep epub_LoadScript)" ]; then
    rm ${3}
    printf "${REDTXT} ${2} does not exist${NRMTXT}\n"
  else
    printf "${BLDTXT} ${3} is ready to edit${NRMTXT}\n"
  fi
}

VimSyntax() {
  # Update/ Appends the necessary directive to the users .vimrc
  #  file to set syntax highlighting for slackdocs
  
  local VIMRC="${HOME}/.vimrc"

  cp ${SYNTAX_DIR}/${SYNTAXFILE} ${SD_DIR}/.${SYNTAXFILE}

  # removes existing slackdoc syntax template lines if they exist
  sed -i /${FILETYPE}/d ${VIMRC}

  # Write the new lines to the vimrc file
  echo "\" Add a pointer to the ${FILETYPE} vim syntax file">>${VIMRC}
  echo "au BufRead,BufNewFile *.${EXTENSION} set filetype=${FILETYPE}">>${VIMRC}
  echo "au! Syntax ${FILETYPE} source ${SD_DIR}/.${SYNTAXFILE}">>${VIMRC}

  printf "${BLDTXT}  The file ${VIMRC} has been updated${NRMTXT}\n"
}

PullTemplates() {
# Pulls the listed template files into the templates directory

#local TEMPPAGE="http://docs.slackware.com/wiki:user:mfillpot:template_list"

  if [ ! -d ${TEMPLATE_DIR} ]; then
    mkdir ${TEMPLATE_DIR}
  fi

  local TEMPS=( howtos howtos_de howtos_es howtos_fr howtos_pl howtos_ru howtos_sr security slackware )

  for TEMPLATE in "${TEMPS[@]}"
  do
    PullPage "templates:${TEMPLATE}" "${TEMPLATE_DIR}"
  done

  printf "${BLDTXT} All templates have been successfully retreived.${NRMTXT}\n"
}

DisplayHelp() {
# Displays the help text

  printf "\n${BLDTXT}Slackware Documentation Project Off-line Tools${NRMTXT}\n"
  printf "${BLDTXT}Version: ${NRMTXT}${VERSION}\n"
  printf "\n"
  printf "${BLDTXT}Options:${NRMTXT}\n"
  printf '%s\n' --------------------
  printf "${BLDTXT}help${NRMTXT} - Displays this dialog\n"
  printf "\n"
  printf "${BLDTXT}fetch${NRMTXT} - fetches a wiki formatted page form docs.slackware.com.\n"
  printf "  ${BLDTXT}URL${NRMTXT} - can be from the site root or the whole address.\n"
  printf "    ${BLDTXT}[Destination Directory]${NRMTXT} - if ommited it will be in the pwd.\n"
  printf "\n"
  printf "  ${BLDTXT}templates${NRMTXT} - " "can be from the site root or the whole address.\n"
  printf "\n"
  printf "${BLDTXT}syntax${NRMTXT} - Applies the associated syntax file for use.\n"
  printf "${BLDTXT}vim${NRMTXT} - Applies the changes to .vimrc to enable slackdoc syntax highlighting.\n"
  printf "\n"
}

case "${1}" in
  fetch)
    if [ "${2}" = "templates" ]; then
      # If too many args then display help
      if test $# -le 2
      then
	BuildStructure
        PullTemplates
      else
        printf "${REDTXT}Too Many Arguments${NRMTXT}\n"
        DisplayHelp
        exit 1
      fi
    else
      # If too many args then display help
      if [[ $# -le 3 ]]; then
        # If no 3rd arg then download to pwd
        if [ -z "${3}" ]; then
	  BuildStructure
          PullPage ${2} ${TEMPLATE_DIR}
        else
          if [ -d ${3} ]; then
            PullPage ${2} ${3}
          else
            printf "${REDTXT}The selected directory does not exist.${NRMTXT}\n"
            exit 1
          fi
        fi
        echo "${RTRN}"
      else
        DisplayHelp
        exit 1
      fi
    fi
    ;;
  syntax)
    # If too many args then display help
    if [[ $# -le 2 ]]; then
      case "${2}" in
        vim)
	  BuildStructure
          VimSyntax
          ;;
        *)
          DisplayHelp
          exit 1
          ;;
      esac 
    else
      DisplayHelp
      exit 1
    fi
    ;;
  help)
    DisplayHelp
    ;;
  *)
    DisplayHelp
    exit 1
    ;;
esac

exit 0
