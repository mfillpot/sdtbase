#!/bin/bash
# Author: Matthew Fillpot
# Created: 2012-12-28
# License: BSD
#
# Description
# -------------------------------------------------------
# Toolkit used to simplify offline editing of slackdocs
#  wiki content
#

# Define the variables
EXTENSION="slackdoc"
FILETYPE="slackdocs"
SYNTAXFILE="slackdocs.vim"
SYNTAX_DIR="syntax_files"
TOOLS_DIR="tools"
TEMPLATE_DIR="templates"

CWD=`pwd`

# Define a variable for return strings
RTRN=""

# Define the path to the repo directory
REPO_PATH=$(dirname $(cd `dirname "${BASH_SOURCE[0]}"` && pwd) )

PullPage() {
  # Pulls the single page from $1 into the location at $2

  local SDBASE="http://docs.slackware.com"

  local EXTRACTLINE="?do=export_raw"

  # Page holds the name of the requested page
  local PAGE=$1

  # if requested page includs base url remove it of output page can be 
  #  determined
  if [[ "$PAGE" == *"$SDBASE"* ]]; then
    PAGE="$(echo "$PAGE"|cut -d "/" -f 4)"
  fi

  # Set output file name
  if [ "$2" = "$REPO_PATH/$TEMPLATE_DIR" ]; then
    local OF="$(echo "$PAGE"|sed 's/:/-/g'|sed 's/templates-//g').$EXTENSION"
  else
    local OF="$(echo "$PAGE"|sed 's/:/-/g').$EXTENSION"
  fi

  # If output file exists remove it
  if [ -e $OF ]; then
    rm $OF
  fi

  # Append the base url to the page address
  local PAGE=$SDBASE/$PAGE

  # retrieve the page
  wget $PAGE$EXTRACTLINE --output-document=$2/$OF

  # Test for a valid pull and display associated message
  if [ -n "$(cat $2/$OF|grep epub_LoadScript)" ]; then
    rm $2/$OF
    RTRN=" $PAGE does not exist"
  else
    RTRN=" $OF is ready to edit"
  fi
}

VimSyntax() {
  # Update/ Appends the necessary directive to the users .vimrc
  #  file to set syntax highlighting for slackdocs
  
  local VIMRC=~/.vimrc

  # removes existing slackdoc syntax template lines if they exist
  sed -i /$FILETYPE/d $VIMRC

  # Write the new lines to the vimrc file
  echo "\" Add a pointer to the $FILETYPE vim syntax file">$VIMRC
  echo "au BufRead,BufNewFile *.$EXTENSION set filetype=$FILETYPE">$VIMRC
  echo "au! Syntax $FILETYPE source $REPO_PATH/$SYNTAX_DIR/$SYNTAXFILE">$VIMRC
}

PullTemplates() {
# Pulls the listed template files into the templates directory

local TEMPPAGE="http://docs.slackware.com/wiki:user:mfillpot:template_list"

  if [ ! -d $REPO_PATH/$TEMPLATE_DIR ]; then
    mkdir $REPO_PATH/$TEMPLATE_DIR
  fi

  local TEMPS=( howtos howtos_de howtos_es howtos_fr howtos_pl howtos_ru howtos_sr security slackware )

  for TEMPLATE in "${TEMPS[@]}"
  do
    PullPage "templates:$TEMPLATE" "$REPO_PATH/$TEMPLATE_DIR"
  done
}

DisplayHelp() {
# Displays the help text

  printf "\e[1m%s\e[0m%s\n" "Slackware Documentation Project Off-line Tools" ""
  printf "\n"
  printf "\e[1m%s\e[0m%s\n" "Options:" ""
  printf '%s\n' --------------------
  printf "\e[1m%s\e[0m%s\n" "help - " "Displays this dialog"
  printf "\n"
  printf "\e[1m%s\e[0m%s\n" "fetch - " "fetches a wiki formatted page form docs.slackware.com."
  printf "\e[1m%s\e[0m%s\n" " URL - " "can be from the site root or the whole address."
  printf "\e[1m%s\e[0m%s\n" "   [Destination Directory] - " "if ommited it will be in the pwd."
  printf "\n"
  printf "\e[1m%s\e[0m%s\n" " templates - " "can be from the site root or the whole address."
  printf "\n"
  printf "\e[1m%s\e[0m%s\n" "syntax - " "Applies the associated syntax file for use."
  printf "\e[1m%s\e[0m%s\n" " vim - " "Applies the changes to .vimrc to enable slackdoc syntax highlighting."
  printf "\n\n"
}

case "$1" in
  fetch)
    if [ "$2" = "templates" ]; then
      # If too many args then display help
      if test $# -le 2
      then
        PullTemplates
      else
        printf "Too Many Arguments \n"
        DisplayHelp
        exit 1
      fi
    else
      # If too many args then display help
      if [[ $# -le 3 ]]; then
        # If no 3rd arg then download to pwd
        if [ -z "$3" ]; then
          PullPage $2 $CWD
        else
          if [ -d $3 ]; then
            PullPage $2 $3
          else
            printf "\nThe selected directory does not exist.\n"
            DisplayHelp
            exit 1
          fi
        fi
        echo "$RTRN"
      else
        DisplayHelp
        exit 1
      fi
    fi
    ;;
  syntax)
    # If too many args then display help
    if [[ $# -le 2 ]]; then
      case "$2" in
        vim)
          VimSyntax
          ;;
        *)
          DisplayHelp
          exit 1
          ;;
      esac 
    else
      DisplayHelp
      exit 1
    fi
    ;;
  update)
    cd $REPO_PATH
    pwd
    git pull
    cd ${CWD}
    ;;
  help)
    DisplayHelp
    ;;
  *)
    DisplayHelp
    exit 1
    ;;
esac

#printf "\e[1m%s\e[0m - %s\n" "test" "nothing"

exit 0
